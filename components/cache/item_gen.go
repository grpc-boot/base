package cache

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Bucket) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "items":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
			if z.Items == nil {
				z.Items = make(map[string]*Item, zb0002)
			} else if len(z.Items) > 0 {
				for key := range z.Items {
					delete(z.Items, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 *Item
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Info")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Info", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(Item)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Info", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Info", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "value":
							za0002.Value, err = dc.ReadBytes(za0002.Value)
							if err != nil {
								err = msgp.WrapError(err, "Info", za0001, "Value")
								return
							}
						case "createdAt":
							za0002.CreatedAt, err = dc.ReadInt64()
							if err != nil {
								err = msgp.WrapError(err, "Info", za0001, "CreatedAt")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Info", za0001)
								return
							}
						}
					}
				}
				z.Items[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Bucket) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "items"
	err = en.Append(0x81, 0xa5, 0x69, 0x74, 0x65, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Items)))
	if err != nil {
		err = msgp.WrapError(err, "Info")
		return
	}
	for za0001, za0002 := range z.Items {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Info")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "value"
			err = en.Append(0x82, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
			if err != nil {
				return
			}
			err = en.WriteBytes(za0002.Value)
			if err != nil {
				err = msgp.WrapError(err, "Info", za0001, "Value")
				return
			}
			// write "createdAt"
			err = en.Append(0xa9, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
			if err != nil {
				return
			}
			err = en.WriteInt64(za0002.CreatedAt)
			if err != nil {
				err = msgp.WrapError(err, "Info", za0001, "CreatedAt")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Bucket) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "items"
	o = append(o, 0x81, 0xa5, 0x69, 0x74, 0x65, 0x6d, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Items)))
	for za0001, za0002 := range z.Items {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "value"
			o = append(o, 0x82, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
			o = msgp.AppendBytes(o, za0002.Value)
			// string "createdAt"
			o = append(o, 0xa9, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
			o = msgp.AppendInt64(o, za0002.CreatedAt)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Bucket) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "items":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Info")
				return
			}
			if z.Items == nil {
				z.Items = make(map[string]*Item, zb0002)
			} else if len(z.Items) > 0 {
				for key := range z.Items {
					delete(z.Items, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *Item
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Info")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(Item)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Info", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Info", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "value":
							za0002.Value, bts, err = msgp.ReadBytesBytes(bts, za0002.Value)
							if err != nil {
								err = msgp.WrapError(err, "Info", za0001, "Value")
								return
							}
						case "createdAt":
							za0002.CreatedAt, bts, err = msgp.ReadInt64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Info", za0001, "CreatedAt")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Info", za0001)
								return
							}
						}
					}
				}
				z.Items[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Bucket) Msgsize() (s int) {
	s = 1 + 6 + msgp.MapHeaderSize
	if z.Items != nil {
		for za0001, za0002 := range z.Items {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += 1 + 6 + msgp.BytesPrefixSize + len(za0002.Value) + 10 + msgp.Int64Size
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Item) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "value":
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "createdAt":
			z.CreatedAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Item) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "value"
	err = en.Append(0x82, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	// write "createdAt"
	err = en.Append(0xa9, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Item) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "value"
	o = append(o, 0x82, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.Value)
	// string "createdAt"
	o = append(o, 0xa9, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.CreatedAt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Item) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "value":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "createdAt":
			z.CreatedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Item) Msgsize() (s int) {
	s = 1 + 6 + msgp.BytesPrefixSize + len(z.Value) + 10 + msgp.Int64Size
	return
}
